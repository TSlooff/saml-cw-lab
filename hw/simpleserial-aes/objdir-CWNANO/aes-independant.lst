   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"aes-independant.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 ".././crypto/aes-independant.c"
  18              		.section	.text.led_ok,"ax",%progbits
  19              		.align	1
  20              		.weak	led_ok
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	led_ok:
  26              	.LFB11:
  27              		.cfi_startproc
  28              		.file 2 ".././hal/hal.h"
   1:.././hal/hal.h **** /*
   2:.././hal/hal.h ****     This file is part of the ChipWhisperer Example Targets
   3:.././hal/hal.h ****     Copyright (C) 2012-2015 NewAE Technology Inc.
   4:.././hal/hal.h **** 
   5:.././hal/hal.h ****     This program is free software: you can redistribute it and/or modify
   6:.././hal/hal.h ****     it under the terms of the GNU General Public License as published by
   7:.././hal/hal.h ****     the Free Software Foundation, either version 3 of the License, or
   8:.././hal/hal.h ****     (at your option) any later version.
   9:.././hal/hal.h **** 
  10:.././hal/hal.h ****     This program is distributed in the hope that it will be useful,
  11:.././hal/hal.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:.././hal/hal.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:.././hal/hal.h ****     GNU General Public License for more details.
  14:.././hal/hal.h **** 
  15:.././hal/hal.h ****     You should have received a copy of the GNU General Public License
  16:.././hal/hal.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:.././hal/hal.h **** */
  18:.././hal/hal.h **** 
  19:.././hal/hal.h **** #ifndef HAL_H_
  20:.././hal/hal.h **** #define HAL_H_
  21:.././hal/hal.h **** 
  22:.././hal/hal.h **** #include <stdint.h>
  23:.././hal/hal.h **** 
  24:.././hal/hal.h **** void platform_init(void);
  25:.././hal/hal.h **** 
  26:.././hal/hal.h **** //PLATFORM Define Types
  27:.././hal/hal.h **** #define CW301_AVR      1
  28:.././hal/hal.h **** #define CW301_XMEGA    2
  29:.././hal/hal.h **** #define CW303          3
  30:.././hal/hal.h **** #define CW304          4
  31:.././hal/hal.h **** #define CW308_MEGARF   8
  32:.././hal/hal.h **** #define CW308_PIC24FJ  10
  33:.././hal/hal.h **** #define CW308_SAM4L    11
  34:.././hal/hal.h **** #define CW308_SI4010   12
  35:.././hal/hal.h **** #define CW308_MPC5748G 13
  36:.././hal/hal.h **** #define CW308_STM32F0  14
  37:.././hal/hal.h **** #define CW308_STM32F1  15
  38:.././hal/hal.h **** #define CW308_STM32F2  16
  39:.././hal/hal.h **** #define CW308_STM32F3  17
  40:.././hal/hal.h **** #define CW308_STM32F4  18
  41:.././hal/hal.h **** #define CW308_CC2538   19
  42:.././hal/hal.h **** #define CW308_K24F     20
  43:.././hal/hal.h **** #define CW308_NRF52840 21
  44:.././hal/hal.h **** #define CW308_AURIX    22
  45:.././hal/hal.h **** #define CW308_SAML11   23
  46:.././hal/hal.h **** #define CW308_EFM32TG11B 24
  47:.././hal/hal.h **** #define CW308_K82F     25
  48:.././hal/hal.h **** #define CW308_LPC55S6X 26
  49:.././hal/hal.h **** #define CW308_PSOC62   27
  50:.././hal/hal.h **** #define CW308_IMXRT1062 28
  51:.././hal/hal.h **** #define CW308_FE310    29
  52:.././hal/hal.h **** #define CW308_EFR32MG21A  30
  53:.././hal/hal.h **** #define CW308_EFM32GG11  31
  54:.././hal/hal.h **** #define CW308_STM32L5  32
  55:.././hal/hal.h **** #define CW308_STM32L4  33
  56:.././hal/hal.h **** #define CW308_RX65N  34
  57:.././hal/hal.h **** #define CW308_MPC5676R 35
  58:.././hal/hal.h **** #define CW308_NEORV32  36
  59:.././hal/hal.h **** #define CW305_IBEX  37
  60:.././hal/hal.h **** 
  61:.././hal/hal.h **** //HAL_TYPE Define Types
  62:.././hal/hal.h **** #define HAL_avr      1
  63:.././hal/hal.h **** #define HAL_xmega    2
  64:.././hal/hal.h **** #define HAL_pic24f   3
  65:.././hal/hal.h **** #define HAL_sam4l    4
  66:.././hal/hal.h **** #define HAL_stm32f0  5
  67:.././hal/hal.h **** #define HAL_stm32f1  6
  68:.././hal/hal.h **** #define HAL_stm32f2  7
  69:.././hal/hal.h **** #define HAL_stm32f3  8
  70:.././hal/hal.h **** #define HAL_stm32f4  9
  71:.././hal/hal.h **** #define HAL_cc2538   10
  72:.././hal/hal.h **** #define HAL_k24f     11
  73:.././hal/hal.h **** #define HAL_nrf52840 12
  74:.././hal/hal.h **** #define HAL_stm32f0_nano 13
  75:.././hal/hal.h **** #define HAL_aurix    14
  76:.././hal/hal.h **** #define HAL_saml11   15
  77:.././hal/hal.h **** #define HAL_efm32tg11b 16
  78:.././hal/hal.h **** #define HAL_k82f     17
  79:.././hal/hal.h **** #define HAL_lpc55s6x 18
  80:.././hal/hal.h **** #define HAL_psoc62   19
  81:.././hal/hal.h **** #define HAL_imxrt1062 20
  82:.././hal/hal.h **** #define HAL_fe310    21
  83:.././hal/hal.h **** #define HAL_efr32mg21a 22
  84:.././hal/hal.h **** #define HAL_efm32gg11 23
  85:.././hal/hal.h **** #define HAL_stm32l5 24
  86:.././hal/hal.h **** #define HAL_stm32l4 25
  87:.././hal/hal.h **** #define HAL_rx65n 26
  88:.././hal/hal.h **** #define HAL_mpc5676r 27
  89:.././hal/hal.h **** #define HAL_neorv32  28
  90:.././hal/hal.h **** #define HAL_sam4s  29
  91:.././hal/hal.h **** #define HAL_ibex  30
  92:.././hal/hal.h **** 
  93:.././hal/hal.h **** #if HAL_TYPE == HAL_avr
  94:.././hal/hal.h ****     #include <avr/io.h>
  95:.././hal/hal.h ****     #include <util/delay.h>
  96:.././hal/hal.h ****     #include "avr/avr_hal.h"
  97:.././hal/hal.h **** #elif HAL_TYPE == HAL_xmega
  98:.././hal/hal.h ****     #include <avr/io.h>
  99:.././hal/hal.h ****     #include <util/delay.h>
 100:.././hal/hal.h ****     #include "xmega/xmega_hal.h"
 101:.././hal/hal.h ****     #include "xmega/avr_compiler.h"
 102:.././hal/hal.h **** #elif HAL_TYPE == HAL_pic24f
 103:.././hal/hal.h ****     #include <xc.h>
 104:.././hal/hal.h ****     #include "pic24f/pic24f_hal.h"
 105:.././hal/hal.h ****     #include "pic24f/uart.h"
 106:.././hal/hal.h **** #elif HAL_TYPE == HAL_sam4l
 107:.././hal/hal.h ****     #include "sam4l/sam4l_hal.h"
 108:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f0
 109:.././hal/hal.h **** 	#include "stm32f0/stm32f0_hal.h"
 110:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f1
 111:.././hal/hal.h **** 	#include "stm32f1/stm32f1_hal.h"
 112:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f2
 113:.././hal/hal.h **** 	#include "stm32f2/stm32f2_hal.h"
 114:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f3
 115:.././hal/hal.h **** 	#include "stm32f3/stm32f3_hal.h"
 116:.././hal/hal.h **** 	#ifdef SECCAN
 117:.././hal/hal.h **** 		#include "stm32f3/stm32f3_hal_seccan.h"
 118:.././hal/hal.h **** 	#endif
 119:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f4
 120:.././hal/hal.h **** 	#include "stm32f4/stm32f4_hal.h"
 121:.././hal/hal.h **** #elif HAL_TYPE == HAL_cc2538
 122:.././hal/hal.h **** 	#include "cc2538/cc2538_hal.h"
 123:.././hal/hal.h **** #elif HAL_TYPE == HAL_k24f
 124:.././hal/hal.h ****     #include "k24f/k24f_hal.h"
 125:.././hal/hal.h **** #elif HAL_TYPE == HAL_k82f
 126:.././hal/hal.h **** #include "k82f/k82f_hal.h"
 127:.././hal/hal.h **** #elif HAL_TYPE == HAL_nrf52840
 128:.././hal/hal.h ****     #include "nrf52840/nrf52840_hal.h"   
 129:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f0_nano
 130:.././hal/hal.h ****     #include "stm32f0/stm32f0_hal.h" 
 131:.././hal/hal.h ****     void led_error(unsigned int status);
 132:.././hal/hal.h ****     void led_ok(unsigned int status);
 133:.././hal/hal.h **** #elif HAL_TYPE == HAL_aurix
 134:.././hal/hal.h ****     #include "aurix/aurix_hal.h"
 135:.././hal/hal.h **** #elif HAL_TYPE == HAL_saml11
 136:.././hal/hal.h ****      #include "saml11/saml11_hal.h"
 137:.././hal/hal.h **** #elif HAL_TYPE == HAL_efm32tg11b
 138:.././hal/hal.h ****      #include "efm32tg11b/efm32tg11b_hal.h"
 139:.././hal/hal.h **** #elif HAL_TYPE == HAL_lpc55s6x
 140:.././hal/hal.h ****      #include "lpc55s6x/lpc55s6x_hal.h"
 141:.././hal/hal.h **** #elif HAL_TYPE == HAL_psoc62
 142:.././hal/hal.h ****     #include "psoc62/psoc62_hal.h"
 143:.././hal/hal.h **** #elif HAL_TYPE == HAL_imxrt1062
 144:.././hal/hal.h ****     #include "imxrt1062/imxrt1062_hal.h"
 145:.././hal/hal.h **** #elif HAL_TYPE == HAL_fe310
 146:.././hal/hal.h ****     #include "fe310/fe310_hal.h"
 147:.././hal/hal.h **** #elif HAL_TYPE == HAL_efr32mg21a
 148:.././hal/hal.h ****     #include "efr32mg21a/efr32mg21a_hal.h"
 149:.././hal/hal.h **** #elif HAL_TYPE == HAL_efm32gg11
 150:.././hal/hal.h ****     #include "efm32gg11/efm32gg11_hal.h"
 151:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32l5
 152:.././hal/hal.h ****     #include "stm32l5/stm32l5_hal.h"
 153:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32l4
 154:.././hal/hal.h ****     #include "stm32l4/stm32l4_hal.h"
 155:.././hal/hal.h **** #elif HAL_TYPE == HAL_rx65n
 156:.././hal/hal.h ****     #include "rx65n/rx65n_hal.h"
 157:.././hal/hal.h **** #elif HAL_TYPE == HAL_mpc5676r
 158:.././hal/hal.h ****     #include "mpc5676r/MPC5676R_hal.h"
 159:.././hal/hal.h **** #elif HAL_TYPE == HAL_neorv32
 160:.././hal/hal.h ****     #include "neorv32/neorv32_hal.h"
 161:.././hal/hal.h **** #elif HAL_TYPE == HAL_sam4s
 162:.././hal/hal.h ****     #include "sam4s/sam4s_hal.h"
 163:.././hal/hal.h **** #elif HAL_TYPE == HAL_ibex
 164:.././hal/hal.h ****     #include "ibex/ibex_hal.h"
 165:.././hal/hal.h **** #else
 166:.././hal/hal.h ****     #error "Unsupported HAL Type"
 167:.././hal/hal.h **** #endif
 168:.././hal/hal.h **** 
 169:.././hal/hal.h **** #if PLATFORM == CW308_MEGARF
 170:.././hal/hal.h ****     #undef trigger_setup
 171:.././hal/hal.h ****     #undef trigger_high
 172:.././hal/hal.h ****     #undef trigger_low
 173:.././hal/hal.h ****     #define trigger_setup() DDRD |= 0x02
 174:.././hal/hal.h ****     #define trigger_high()  PORTD |= 0x02
 175:.././hal/hal.h ****     #define trigger_low()   PORTD &= ~(0x02)
 176:.././hal/hal.h ****     
 177:.././hal/hal.h ****     #define HW_AES128_Init();      AES_CTRL = 0x00;
 178:.././hal/hal.h **** 
 179:.././hal/hal.h ****     #define HW_AES128_LoadKey(key);  for (uint8_t i = 0; i < 16; i++){ \
 180:.././hal/hal.h ****                                      AES_KEY = *(key+i); \
 181:.././hal/hal.h ****                                   }
 182:.././hal/hal.h **** 
 183:.././hal/hal.h ****     #define HW_AES128_Enc(pt);  for (uint8_t i = 0; i < 16; i++){ \
 184:.././hal/hal.h ****                                     AES_STATE = *(pt+i); \
 185:.././hal/hal.h ****                                 } \
 186:.././hal/hal.h ****                                   \
 187:.././hal/hal.h ****                                 AES_CTRL |= 1<<AES_REQUEST; \
 188:.././hal/hal.h ****                                   \
 189:.././hal/hal.h ****                                 /*Wait for done  */ \
 190:.././hal/hal.h ****                                 while ((AES_STATUS & (1<<AES_DONE)) == 0){ \
 191:.././hal/hal.h ****                                     ; \
 192:.././hal/hal.h ****                                 } \
 193:.././hal/hal.h ****                                   \
 194:.././hal/hal.h ****                                 for (uint8_t i = 0; i < 16; i++){ \
 195:.././hal/hal.h ****                                     *(pt+i) = AES_STATE; \
 196:.././hal/hal.h ****                                 }
 197:.././hal/hal.h ****     
 198:.././hal/hal.h **** #endif
 199:.././hal/hal.h **** 
 200:.././hal/hal.h **** __attribute__((weak)) void led_ok(unsigned int status)
  29              		.loc 2 200 28 view -0
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              		@ sp needed
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE11:
  38              		.section	.text.led_error,"ax",%progbits
  39              		.align	1
  40              		.weak	led_error
  41              		.syntax unified
  42              		.code	16
  43              		.thumb_func
  45              	led_error:
  46              	.LVL0:
  47              	.LFB1:
 201:.././hal/hal.h **** {
 202:.././hal/hal.h **** }
 203:.././hal/hal.h **** 
 204:.././hal/hal.h **** __attribute__((weak)) void led_error(unsigned int status)
 205:.././hal/hal.h **** {
  48              		.loc 2 205 1 view -0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
 206:.././hal/hal.h **** }
  53              		.loc 2 206 1 view .LVU2
  54              		@ sp needed
  55 0000 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE1:
  59              		.section	.text.aes_indep_init,"ax",%progbits
  60              		.align	1
  61              		.global	aes_indep_init
  62              		.syntax unified
  63              		.code	16
  64              		.thumb_func
  66              	aes_indep_init:
  67              	.LFB2:
   1:.././crypto/aes-independant.c **** /*
   2:.././crypto/aes-independant.c ****     This file is part of the AESExplorer Example Targets
   3:.././crypto/aes-independant.c ****     Copyright (C) 2012 Colin O'Flynn <coflynn@newae.com>
   4:.././crypto/aes-independant.c **** 
   5:.././crypto/aes-independant.c ****     This program is free software: you can redistribute it and/or modify
   6:.././crypto/aes-independant.c ****     it under the terms of the GNU General Public License as published by
   7:.././crypto/aes-independant.c ****     the Free Software Foundation, either version 3 of the License, or
   8:.././crypto/aes-independant.c ****     (at your option) any later version.
   9:.././crypto/aes-independant.c **** 
  10:.././crypto/aes-independant.c ****     This program is distributed in the hope that it will be useful,
  11:.././crypto/aes-independant.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:.././crypto/aes-independant.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:.././crypto/aes-independant.c ****     GNU General Public License for more details.
  14:.././crypto/aes-independant.c **** 
  15:.././crypto/aes-independant.c ****     You should have received a copy of the GNU General Public License
  16:.././crypto/aes-independant.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:.././crypto/aes-independant.c **** */
  18:.././crypto/aes-independant.c **** 
  19:.././crypto/aes-independant.c **** #include "aes-independant.h"
  20:.././crypto/aes-independant.c **** #include "hal.h"
  21:.././crypto/aes-independant.c **** 
  22:.././crypto/aes-independant.c **** #if HWCRYPTO
  23:.././crypto/aes-independant.c **** 
  24:.././crypto/aes-independant.c **** void aes_indep_init(void)
  25:.././crypto/aes-independant.c **** {
  26:.././crypto/aes-independant.c ****     HW_AES128_Init();
  27:.././crypto/aes-independant.c **** }
  28:.././crypto/aes-independant.c **** 
  29:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  30:.././crypto/aes-independant.c **** {
  31:.././crypto/aes-independant.c ****     HW_AES128_LoadKey(key);
  32:.././crypto/aes-independant.c **** }
  33:.././crypto/aes-independant.c **** 
  34:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
  35:.././crypto/aes-independant.c **** {
  36:.././crypto/aes-independant.c ****     HW_AES128_Enc_pretrigger(pt);
  37:.././crypto/aes-independant.c **** }
  38:.././crypto/aes-independant.c **** 
  39:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
  40:.././crypto/aes-independant.c **** {
  41:.././crypto/aes-independant.c ****     HW_AES128_Enc_posttrigger(pt);
  42:.././crypto/aes-independant.c **** }
  43:.././crypto/aes-independant.c **** 
  44:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
  45:.././crypto/aes-independant.c **** {
  46:.././crypto/aes-independant.c ****     HW_AES128_Enc(pt);
  47:.././crypto/aes-independant.c **** }
  48:.././crypto/aes-independant.c **** 
  49:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
  50:.././crypto/aes-independant.c **** {
  51:.././crypto/aes-independant.c **** }
  52:.././crypto/aes-independant.c **** 
  53:.././crypto/aes-independant.c **** #elif defined(AVRCRYPTOLIB)
  54:.././crypto/aes-independant.c **** #include "aes128_enc.h"
  55:.././crypto/aes-independant.c **** #include "aes_keyschedule.h"
  56:.././crypto/aes-independant.c **** 
  57:.././crypto/aes-independant.c **** aes128_ctx_t ctx;
  58:.././crypto/aes-independant.c **** 
  59:.././crypto/aes-independant.c **** void aes_indep_init(void)
  60:.././crypto/aes-independant.c **** {
  61:.././crypto/aes-independant.c **** 	;
  62:.././crypto/aes-independant.c **** }
  63:.././crypto/aes-independant.c **** 
  64:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  65:.././crypto/aes-independant.c **** {
  66:.././crypto/aes-independant.c **** 	aes128_init(key, &ctx);
  67:.././crypto/aes-independant.c **** }
  68:.././crypto/aes-independant.c **** 
  69:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
  70:.././crypto/aes-independant.c **** {
  71:.././crypto/aes-independant.c **** 	aes128_enc(pt, &ctx); /* encrypting the data block */
  72:.././crypto/aes-independant.c **** }
  73:.././crypto/aes-independant.c **** 
  74:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
  75:.././crypto/aes-independant.c **** {
  76:.././crypto/aes-independant.c ****     ;
  77:.././crypto/aes-independant.c **** }
  78:.././crypto/aes-independant.c **** 
  79:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
  80:.././crypto/aes-independant.c **** {
  81:.././crypto/aes-independant.c ****     ;
  82:.././crypto/aes-independant.c **** }
  83:.././crypto/aes-independant.c **** 
  84:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
  85:.././crypto/aes-independant.c **** {
  86:.././crypto/aes-independant.c **** }
  87:.././crypto/aes-independant.c **** 
  88:.././crypto/aes-independant.c **** #elif defined(SIMPLEAES)
  89:.././crypto/aes-independant.c **** 
  90:.././crypto/aes-independant.c **** uint8_t enckey[16];
  91:.././crypto/aes-independant.c **** 
  92:.././crypto/aes-independant.c **** void aes_indep_init(void)
  93:.././crypto/aes-independant.c **** {
  94:.././crypto/aes-independant.c **** 	;
  95:.././crypto/aes-independant.c **** }
  96:.././crypto/aes-independant.c **** 
  97:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
  98:.././crypto/aes-independant.c **** {
  99:.././crypto/aes-independant.c **** 	for(uint8_t i=0; i < 16; i++){
 100:.././crypto/aes-independant.c **** 		enckey[i] = key[i];
 101:.././crypto/aes-independant.c **** 	}
 102:.././crypto/aes-independant.c **** }
 103:.././crypto/aes-independant.c **** 
 104:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 105:.././crypto/aes-independant.c **** {
 106:.././crypto/aes-independant.c **** 	uint8_t * result = aes(pt, enckey);
 107:.././crypto/aes-independant.c **** 	for(uint8_t i=0; i < 16; i++){
 108:.././crypto/aes-independant.c **** 		pt[i] = result[i];
 109:.././crypto/aes-independant.c **** 	}
 110:.././crypto/aes-independant.c **** }
 111:.././crypto/aes-independant.c **** 
 112:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 113:.././crypto/aes-independant.c **** {
 114:.././crypto/aes-independant.c ****     ;
 115:.././crypto/aes-independant.c **** }
 116:.././crypto/aes-independant.c **** 
 117:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 118:.././crypto/aes-independant.c **** {
 119:.././crypto/aes-independant.c ****     ;
 120:.././crypto/aes-independant.c **** }
 121:.././crypto/aes-independant.c **** 
 122:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 123:.././crypto/aes-independant.c **** {
 124:.././crypto/aes-independant.c **** }
 125:.././crypto/aes-independant.c **** 
 126:.././crypto/aes-independant.c **** #elif defined(DPAV4)
 127:.././crypto/aes-independant.c **** 
 128:.././crypto/aes-independant.c **** #include "aes.h"
 129:.././crypto/aes-independant.c **** #include "aes_enc.h"
 130:.././crypto/aes-independant.c **** 
 131:.././crypto/aes-independant.c **** /*  This is the AES RSM 256 encryption function that call the generic AES RSM encryption core*/
 132:.././crypto/aes-independant.c **** void aes256_enc(uint8_t* j, void* buffer, aes256_ctx_t* ctx,uint8_t rng){
 133:.././crypto/aes-independant.c **** 	aes_encrypt_core(j,buffer, (aes_genctx_t*)ctx, 14,(uint8_t)rng);
 134:.././crypto/aes-independant.c **** }
 135:.././crypto/aes-independant.c **** 
 136:.././crypto/aes-independant.c **** aes256_ctx_t ctx;
 137:.././crypto/aes-independant.c **** 
 138:.././crypto/aes-independant.c **** void aes_indep_init(void)
 139:.././crypto/aes-independant.c **** {
 140:.././crypto/aes-independant.c ****     ;
 141:.././crypto/aes-independant.c **** }
 142:.././crypto/aes-independant.c **** 
 143:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
 144:.././crypto/aes-independant.c **** {
 145:.././crypto/aes-independant.c **** 	aes256_init(key, &ctx);
 146:.././crypto/aes-independant.c **** }
 147:.././crypto/aes-independant.c **** 
 148:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 149:.././crypto/aes-independant.c **** {
 150:.././crypto/aes-independant.c **** 	static uint8_t j[0];
 151:.././crypto/aes-independant.c **** 
 152:.././crypto/aes-independant.c **** 	//Encryption with trigger enabled
 153:.././crypto/aes-independant.c **** 	aes256_enc(j, pt, &ctx, 1);
 154:.././crypto/aes-independant.c **** }
 155:.././crypto/aes-independant.c **** 
 156:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 157:.././crypto/aes-independant.c **** {
 158:.././crypto/aes-independant.c ****     ;
 159:.././crypto/aes-independant.c **** }
 160:.././crypto/aes-independant.c **** 
 161:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 162:.././crypto/aes-independant.c **** {
 163:.././crypto/aes-independant.c ****     ;
 164:.././crypto/aes-independant.c **** }
 165:.././crypto/aes-independant.c **** 
 166:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 167:.././crypto/aes-independant.c **** {
 168:.././crypto/aes-independant.c **** }
 169:.././crypto/aes-independant.c **** 
 170:.././crypto/aes-independant.c **** #elif defined(TINYAES128C)
 171:.././crypto/aes-independant.c **** 
 172:.././crypto/aes-independant.c **** #include "aes.h"
 173:.././crypto/aes-independant.c **** 
 174:.././crypto/aes-independant.c **** uint8_t enckey[16];
 175:.././crypto/aes-independant.c **** 
 176:.././crypto/aes-independant.c **** void aes_indep_init(void)
 177:.././crypto/aes-independant.c **** {
  68              		.loc 1 177 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
 178:.././crypto/aes-independant.c **** 	;
  73              		.loc 1 178 2 view .LVU4
 179:.././crypto/aes-independant.c **** }
  74              		.loc 1 179 1 is_stmt 0 view .LVU5
  75              		@ sp needed
  76 0000 7047     		bx	lr
  77              		.cfi_endproc
  78              	.LFE2:
  80              		.section	.text.aes_indep_key,"ax",%progbits
  81              		.align	1
  82              		.global	aes_indep_key
  83              		.syntax unified
  84              		.code	16
  85              		.thumb_func
  87              	aes_indep_key:
  88              	.LVL1:
  89              	.LFB3:
 180:.././crypto/aes-independant.c **** 
 181:.././crypto/aes-independant.c **** void aes_indep_key(uint8_t * key)
 182:.././crypto/aes-independant.c **** {
  90              		.loc 1 182 1 is_stmt 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
 183:.././crypto/aes-independant.c ****     AES128_ECB_indp_setkey(key);
  94              		.loc 1 183 5 view .LVU7
 182:.././crypto/aes-independant.c ****     AES128_ECB_indp_setkey(key);
  95              		.loc 1 182 1 is_stmt 0 view .LVU8
  96 0000 10B5     		push	{r4, lr}
  97              	.LCFI0:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 4, -8
 100              		.cfi_offset 14, -4
 101              		.loc 1 183 5 view .LVU9
 102 0002 FFF7FEFF 		bl	AES128_ECB_indp_setkey
 103              	.LVL2:
 184:.././crypto/aes-independant.c **** }
 104              		.loc 1 184 1 view .LVU10
 105              		@ sp needed
 106 0006 10BD     		pop	{r4, pc}
 107              		.cfi_endproc
 108              	.LFE3:
 110              		.section	.text.aes_indep_enc,"ax",%progbits
 111              		.align	1
 112              		.global	aes_indep_enc
 113              		.syntax unified
 114              		.code	16
 115              		.thumb_func
 117              	aes_indep_enc:
 118              	.LVL3:
 119              	.LFB4:
 185:.././crypto/aes-independant.c **** 
 186:.././crypto/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 187:.././crypto/aes-independant.c **** {
 120              		.loc 1 187 1 is_stmt 1 view -0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 188:.././crypto/aes-independant.c **** 	AES128_ECB_indp_crypto(pt);
 124              		.loc 1 188 2 view .LVU12
 187:.././crypto/aes-independant.c **** 	AES128_ECB_indp_crypto(pt);
 125              		.loc 1 187 1 is_stmt 0 view .LVU13
 126 0000 10B5     		push	{r4, lr}
 127              	.LCFI1:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 4, -8
 130              		.cfi_offset 14, -4
 131              		.loc 1 188 2 view .LVU14
 132 0002 FFF7FEFF 		bl	AES128_ECB_indp_crypto
 133              	.LVL4:
 189:.././crypto/aes-independant.c **** }
 134              		.loc 1 189 1 view .LVU15
 135              		@ sp needed
 136 0006 10BD     		pop	{r4, pc}
 137              		.cfi_endproc
 138              	.LFE4:
 140              		.section	.text.aes_indep_enc_pretrigger,"ax",%progbits
 141              		.align	1
 142              		.global	aes_indep_enc_pretrigger
 143              		.syntax unified
 144              		.code	16
 145              		.thumb_func
 147              	aes_indep_enc_pretrigger:
 148              	.LVL5:
 149              	.LFB5:
 190:.././crypto/aes-independant.c **** 
 191:.././crypto/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 192:.././crypto/aes-independant.c **** {
 150              		.loc 1 192 1 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 193:.././crypto/aes-independant.c ****     ;
 155              		.loc 1 193 5 view .LVU17
 194:.././crypto/aes-independant.c **** }
 156              		.loc 1 194 1 is_stmt 0 view .LVU18
 157              		@ sp needed
 158 0000 7047     		bx	lr
 159              		.cfi_endproc
 160              	.LFE5:
 162              		.section	.text.aes_indep_enc_posttrigger,"ax",%progbits
 163              		.align	1
 164              		.global	aes_indep_enc_posttrigger
 165              		.syntax unified
 166              		.code	16
 167              		.thumb_func
 169              	aes_indep_enc_posttrigger:
 170              	.LFB9:
 171              		.cfi_startproc
 195:.././crypto/aes-independant.c **** 
 196:.././crypto/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 172              		.loc 1 196 6 is_stmt 1 view -0
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176              		@ sp needed
 177 0000 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE9:
 181              		.section	.text.aes_indep_mask,"ax",%progbits
 182              		.align	1
 183              		.global	aes_indep_mask
 184              		.syntax unified
 185              		.code	16
 186              		.thumb_func
 188              	aes_indep_mask:
 189              	.LVL6:
 190              	.LFB7:
 197:.././crypto/aes-independant.c **** {
 198:.././crypto/aes-independant.c ****     ;
 199:.././crypto/aes-independant.c **** }
 200:.././crypto/aes-independant.c **** 
 201:.././crypto/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 202:.././crypto/aes-independant.c **** {
 191              		.loc 1 202 1 view -0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 203:.././crypto/aes-independant.c **** }
 196              		.loc 1 203 1 view .LVU21
 197              		@ sp needed
 198 0000 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE7:
 202              		.global	enckey
 203              		.bss
 206              	enckey:
 207 0000 00000000 		.space	16
 207      00000000 
 207      00000000 
 207      00000000 
 208              		.text
 209              	.Letext0:
 210              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 211              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 212              		.file 5 ".././crypto/tiny-AES128-C/aes.h"
DEFINED SYMBOLS
                            *ABS*:00000000 aes-independant.c
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:19     .text.led_ok:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:25     .text.led_ok:00000000 led_ok
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:39     .text.led_error:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:45     .text.led_error:00000000 led_error
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:60     .text.aes_indep_init:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:66     .text.aes_indep_init:00000000 aes_indep_init
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:81     .text.aes_indep_key:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:87     .text.aes_indep_key:00000000 aes_indep_key
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:111    .text.aes_indep_enc:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:117    .text.aes_indep_enc:00000000 aes_indep_enc
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:141    .text.aes_indep_enc_pretrigger:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:147    .text.aes_indep_enc_pretrigger:00000000 aes_indep_enc_pretrigger
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:163    .text.aes_indep_enc_posttrigger:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:169    .text.aes_indep_enc_posttrigger:00000000 aes_indep_enc_posttrigger
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:182    .text.aes_indep_mask:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:188    .text.aes_indep_mask:00000000 aes_indep_mask
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:206    .bss:00000000 enckey
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//cciF7AFi.s:207    .bss:00000000 $d

UNDEFINED SYMBOLS
AES128_ECB_indp_setkey
AES128_ECB_indp_crypto
