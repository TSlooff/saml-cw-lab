   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"simpleserial-aes.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "simpleserial-aes.c"
  18              		.section	.text.reset,"ax",%progbits
  19              		.align	1
  20              		.global	reset
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	reset:
  26              	.LVL0:
  27              	.LFB5:
   1:simpleserial-aes.c **** /*
   2:simpleserial-aes.c ****     This file is part of the ChipWhisperer Example Targets
   3:simpleserial-aes.c ****     Copyright (C) 2012-2017 NewAE Technology Inc.
   4:simpleserial-aes.c **** 
   5:simpleserial-aes.c ****     This program is free software: you can redistribute it and/or modify
   6:simpleserial-aes.c ****     it under the terms of the GNU General Public License as published by
   7:simpleserial-aes.c ****     the Free Software Foundation, either version 3 of the License, or
   8:simpleserial-aes.c ****     (at your option) any later version.
   9:simpleserial-aes.c **** 
  10:simpleserial-aes.c ****     This program is distributed in the hope that it will be useful,
  11:simpleserial-aes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:simpleserial-aes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:simpleserial-aes.c ****     GNU General Public License for more details.
  14:simpleserial-aes.c **** 
  15:simpleserial-aes.c ****     You should have received a copy of the GNU General Public License
  16:simpleserial-aes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:simpleserial-aes.c **** */
  18:simpleserial-aes.c **** 
  19:simpleserial-aes.c **** #include "aes-independant.h"
  20:simpleserial-aes.c **** #include "hal.h"
  21:simpleserial-aes.c **** #include "simpleserial.h"
  22:simpleserial-aes.c **** #include <stdint.h>
  23:simpleserial-aes.c **** #include <stdlib.h>
  24:simpleserial-aes.c **** 
  25:simpleserial-aes.c **** uint8_t get_mask(uint8_t* m, uint8_t len)
  26:simpleserial-aes.c **** {
  27:simpleserial-aes.c ****   aes_indep_mask(m, len);
  28:simpleserial-aes.c ****   return 0x00;
  29:simpleserial-aes.c **** }
  30:simpleserial-aes.c **** 
  31:simpleserial-aes.c **** uint8_t get_key(uint8_t* k, uint8_t len)
  32:simpleserial-aes.c **** {
  33:simpleserial-aes.c **** 	aes_indep_key(k);
  34:simpleserial-aes.c **** 	return 0x00;
  35:simpleserial-aes.c **** }
  36:simpleserial-aes.c **** 
  37:simpleserial-aes.c **** uint8_t get_pt(uint8_t* pt, uint8_t len)
  38:simpleserial-aes.c **** {
  39:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
  40:simpleserial-aes.c **** 
  41:simpleserial-aes.c **** 	trigger_high();
  42:simpleserial-aes.c **** 
  43:simpleserial-aes.c ****   #ifdef ADD_JITTER
  44:simpleserial-aes.c ****   for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  45:simpleserial-aes.c ****   #endif
  46:simpleserial-aes.c **** 
  47:simpleserial-aes.c **** 	aes_indep_enc(pt); /* encrypting the data block */
  48:simpleserial-aes.c **** 	trigger_low();
  49:simpleserial-aes.c **** 
  50:simpleserial-aes.c ****     aes_indep_enc_posttrigger(pt);
  51:simpleserial-aes.c **** 
  52:simpleserial-aes.c **** 	simpleserial_put('r', 16, pt);
  53:simpleserial-aes.c **** 	return 0x00;
  54:simpleserial-aes.c **** }
  55:simpleserial-aes.c **** 
  56:simpleserial-aes.c **** uint8_t reset(uint8_t* x, uint8_t len)
  57:simpleserial-aes.c **** {
  28              		.loc 1 57 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  58:simpleserial-aes.c ****     // Reset key here if needed
  59:simpleserial-aes.c **** 	return 0x00;
  33              		.loc 1 59 2 view .LVU1
  60:simpleserial-aes.c **** }
  34              		.loc 1 60 1 is_stmt 0 view .LVU2
  35 0000 0020     		movs	r0, #0
  36              	.LVL1:
  37              		.loc 1 60 1 view .LVU3
  38              		@ sp needed
  39 0002 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE5:
  43              		.section	.text.enc_multi_setnum,"ax",%progbits
  44              		.align	1
  45              		.global	enc_multi_setnum
  46              		.syntax unified
  47              		.code	16
  48              		.thumb_func
  50              	enc_multi_setnum:
  51              	.LVL2:
  52              	.LFB7:
  61:simpleserial-aes.c **** 
  62:simpleserial-aes.c **** static uint16_t num_encryption_rounds = 10;
  63:simpleserial-aes.c **** 
  64:simpleserial-aes.c **** uint8_t enc_multi_getpt(uint8_t* pt, uint8_t len)
  65:simpleserial-aes.c **** {
  66:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
  67:simpleserial-aes.c **** 
  68:simpleserial-aes.c ****     for(unsigned int i = 0; i < num_encryption_rounds; i++){
  69:simpleserial-aes.c ****         trigger_high();
  70:simpleserial-aes.c ****         aes_indep_enc(pt);
  71:simpleserial-aes.c ****         trigger_low();
  72:simpleserial-aes.c ****     }
  73:simpleserial-aes.c **** 
  74:simpleserial-aes.c ****     aes_indep_enc_posttrigger(pt);
  75:simpleserial-aes.c **** 	simpleserial_put('r', 16, pt);
  76:simpleserial-aes.c ****     return 0;
  77:simpleserial-aes.c **** }
  78:simpleserial-aes.c **** 
  79:simpleserial-aes.c **** uint8_t enc_multi_setnum(uint8_t* t, uint8_t len)
  80:simpleserial-aes.c **** {
  53              		.loc 1 80 1 is_stmt 1 view -0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  81:simpleserial-aes.c ****     //Assumes user entered a number like [0, 200] to mean "200"
  82:simpleserial-aes.c ****     //which is most sane looking for humans I think
  83:simpleserial-aes.c ****     num_encryption_rounds = t[1];
  58              		.loc 1 83 5 view .LVU5
  84:simpleserial-aes.c ****     num_encryption_rounds |= t[0] << 8;
  59              		.loc 1 84 5 view .LVU6
  60              		.loc 1 84 27 is_stmt 0 view .LVU7
  61 0000 4378     		ldrb	r3, [r0, #1]
  62 0002 0178     		ldrb	r1, [r0]
  63              	.LVL3:
  64              		.loc 1 84 27 view .LVU8
  65 0004 1B02     		lsls	r3, r3, #8
  66 0006 034A     		ldr	r2, .L3
  67 0008 0B43     		orrs	r3, r1
  68 000a 5BBA     		rev16	r3, r3
  85:simpleserial-aes.c ****     return 0;
  86:simpleserial-aes.c **** }
  69              		.loc 1 86 1 view .LVU9
  70 000c 0020     		movs	r0, #0
  71              	.LVL4:
  72              		.loc 1 86 1 view .LVU10
  73              		@ sp needed
  84:simpleserial-aes.c ****     num_encryption_rounds |= t[0] << 8;
  74              		.loc 1 84 27 view .LVU11
  75 000e 1380     		strh	r3, [r2]
  85:simpleserial-aes.c ****     return 0;
  76              		.loc 1 85 5 is_stmt 1 view .LVU12
  77              		.loc 1 86 1 is_stmt 0 view .LVU13
  78 0010 7047     		bx	lr
  79              	.L4:
  80 0012 C046     		.align	2
  81              	.L3:
  82 0014 00000000 		.word	.LANCHOR0
  83              		.cfi_endproc
  84              	.LFE7:
  86              		.section	.text.get_mask,"ax",%progbits
  87              		.align	1
  88              		.global	get_mask
  89              		.syntax unified
  90              		.code	16
  91              		.thumb_func
  93              	get_mask:
  94              	.LVL5:
  95              	.LFB2:
  26:simpleserial-aes.c ****   aes_indep_mask(m, len);
  96              		.loc 1 26 1 is_stmt 1 view -0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
  27:simpleserial-aes.c ****   return 0x00;
 100              		.loc 1 27 3 view .LVU15
  26:simpleserial-aes.c ****   aes_indep_mask(m, len);
 101              		.loc 1 26 1 is_stmt 0 view .LVU16
 102 0000 10B5     		push	{r4, lr}
 103              	.LCFI0:
 104              		.cfi_def_cfa_offset 8
 105              		.cfi_offset 4, -8
 106              		.cfi_offset 14, -4
  27:simpleserial-aes.c ****   return 0x00;
 107              		.loc 1 27 3 view .LVU17
 108 0002 FFF7FEFF 		bl	aes_indep_mask
 109              	.LVL6:
  28:simpleserial-aes.c **** }
 110              		.loc 1 28 3 is_stmt 1 view .LVU18
  29:simpleserial-aes.c **** 
 111              		.loc 1 29 1 is_stmt 0 view .LVU19
 112              		@ sp needed
 113 0006 0020     		movs	r0, #0
 114 0008 10BD     		pop	{r4, pc}
 115              		.cfi_endproc
 116              	.LFE2:
 118              		.section	.text.get_key,"ax",%progbits
 119              		.align	1
 120              		.global	get_key
 121              		.syntax unified
 122              		.code	16
 123              		.thumb_func
 125              	get_key:
 126              	.LVL7:
 127              	.LFB3:
  32:simpleserial-aes.c **** 	aes_indep_key(k);
 128              		.loc 1 32 1 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
  33:simpleserial-aes.c **** 	return 0x00;
 132              		.loc 1 33 2 view .LVU21
  32:simpleserial-aes.c **** 	aes_indep_key(k);
 133              		.loc 1 32 1 is_stmt 0 view .LVU22
 134 0000 10B5     		push	{r4, lr}
 135              	.LCFI1:
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 4, -8
 138              		.cfi_offset 14, -4
  33:simpleserial-aes.c **** 	return 0x00;
 139              		.loc 1 33 2 view .LVU23
 140 0002 FFF7FEFF 		bl	aes_indep_key
 141              	.LVL8:
  34:simpleserial-aes.c **** }
 142              		.loc 1 34 2 is_stmt 1 view .LVU24
  35:simpleserial-aes.c **** 
 143              		.loc 1 35 1 is_stmt 0 view .LVU25
 144              		@ sp needed
 145 0006 0020     		movs	r0, #0
 146 0008 10BD     		pop	{r4, pc}
 147              		.cfi_endproc
 148              	.LFE3:
 150              		.section	.text.get_pt,"ax",%progbits
 151              		.align	1
 152              		.global	get_pt
 153              		.syntax unified
 154              		.code	16
 155              		.thumb_func
 157              	get_pt:
 158              	.LVL9:
 159              	.LFB4:
  38:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 160              		.loc 1 38 1 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
  39:simpleserial-aes.c **** 
 164              		.loc 1 39 5 view .LVU27
  38:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 165              		.loc 1 38 1 is_stmt 0 view .LVU28
 166 0000 10B5     		push	{r4, lr}
 167              	.LCFI2:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 4, -8
 170              		.cfi_offset 14, -4
  38:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 171              		.loc 1 38 1 view .LVU29
 172 0002 0400     		movs	r4, r0
  54:simpleserial-aes.c **** 
 173              		.loc 1 54 1 view .LVU30
 174              		@ sp needed
  39:simpleserial-aes.c **** 
 175              		.loc 1 39 5 view .LVU31
 176 0004 FFF7FEFF 		bl	aes_indep_enc_pretrigger
 177              	.LVL10:
  41:simpleserial-aes.c **** 
 178              		.loc 1 41 2 is_stmt 1 view .LVU32
 179 0008 FFF7FEFF 		bl	trigger_high
 180              	.LVL11:
  47:simpleserial-aes.c **** 	trigger_low();
 181              		.loc 1 47 2 view .LVU33
 182 000c 2000     		movs	r0, r4
 183 000e FFF7FEFF 		bl	aes_indep_enc
 184              	.LVL12:
  48:simpleserial-aes.c **** 
 185              		.loc 1 48 2 view .LVU34
 186 0012 FFF7FEFF 		bl	trigger_low
 187              	.LVL13:
  50:simpleserial-aes.c **** 
 188              		.loc 1 50 5 view .LVU35
 189 0016 2000     		movs	r0, r4
 190 0018 FFF7FEFF 		bl	aes_indep_enc_posttrigger
 191              	.LVL14:
  52:simpleserial-aes.c **** 	return 0x00;
 192              		.loc 1 52 2 view .LVU36
 193 001c 2200     		movs	r2, r4
 194 001e 1021     		movs	r1, #16
 195 0020 7220     		movs	r0, #114
 196 0022 FFF7FEFF 		bl	simpleserial_put
 197              	.LVL15:
  53:simpleserial-aes.c **** }
 198              		.loc 1 53 2 view .LVU37
  54:simpleserial-aes.c **** 
 199              		.loc 1 54 1 is_stmt 0 view .LVU38
 200 0026 0020     		movs	r0, #0
 201              	.LVL16:
  54:simpleserial-aes.c **** 
 202              		.loc 1 54 1 view .LVU39
 203 0028 10BD     		pop	{r4, pc}
 204              		.cfi_endproc
 205              	.LFE4:
 207              		.section	.text.enc_multi_getpt,"ax",%progbits
 208              		.align	1
 209              		.global	enc_multi_getpt
 210              		.syntax unified
 211              		.code	16
 212              		.thumb_func
 214              	enc_multi_getpt:
 215              	.LVL17:
 216              	.LFB6:
  65:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 217              		.loc 1 65 1 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
  66:simpleserial-aes.c **** 
 221              		.loc 1 66 5 view .LVU41
  65:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 222              		.loc 1 65 1 is_stmt 0 view .LVU42
 223 0000 70B5     		push	{r4, r5, r6, lr}
 224              	.LCFI3:
 225              		.cfi_def_cfa_offset 16
 226              		.cfi_offset 4, -16
 227              		.cfi_offset 5, -12
 228              		.cfi_offset 6, -8
 229              		.cfi_offset 14, -4
  65:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 230              		.loc 1 65 1 view .LVU43
 231 0002 0400     		movs	r4, r0
 232              	.LBB2:
  68:simpleserial-aes.c ****         trigger_high();
 233              		.loc 1 68 22 view .LVU44
 234 0004 0025     		movs	r5, #0
 235              	.LBE2:
  66:simpleserial-aes.c **** 
 236              		.loc 1 66 5 view .LVU45
 237 0006 FFF7FEFF 		bl	aes_indep_enc_pretrigger
 238              	.LVL18:
  68:simpleserial-aes.c ****         trigger_high();
 239              		.loc 1 68 5 is_stmt 1 view .LVU46
 240              	.LBB3:
  68:simpleserial-aes.c ****         trigger_high();
 241              		.loc 1 68 9 view .LVU47
 242              	.L9:
  68:simpleserial-aes.c ****         trigger_high();
 243              		.loc 1 68 31 discriminator 1 view .LVU48
 244 000a 0B4B     		ldr	r3, .L11
 245 000c 1B88     		ldrh	r3, [r3]
 246 000e AB42     		cmp	r3, r5
 247 0010 09D8     		bhi	.L10
 248              	.LBE3:
  74:simpleserial-aes.c **** 	simpleserial_put('r', 16, pt);
 249              		.loc 1 74 5 view .LVU49
  77:simpleserial-aes.c **** 
 250              		.loc 1 77 1 is_stmt 0 view .LVU50
 251              		@ sp needed
  74:simpleserial-aes.c **** 	simpleserial_put('r', 16, pt);
 252              		.loc 1 74 5 view .LVU51
 253 0012 2000     		movs	r0, r4
 254 0014 FFF7FEFF 		bl	aes_indep_enc_posttrigger
 255              	.LVL19:
  75:simpleserial-aes.c ****     return 0;
 256              		.loc 1 75 2 is_stmt 1 view .LVU52
 257 0018 2200     		movs	r2, r4
 258 001a 1021     		movs	r1, #16
 259 001c 7220     		movs	r0, #114
 260 001e FFF7FEFF 		bl	simpleserial_put
 261              	.LVL20:
  76:simpleserial-aes.c **** }
 262              		.loc 1 76 5 view .LVU53
  77:simpleserial-aes.c **** 
 263              		.loc 1 77 1 is_stmt 0 view .LVU54
 264 0022 0020     		movs	r0, #0
 265              	.LVL21:
 266              	.LVL22:
  77:simpleserial-aes.c **** 
 267              		.loc 1 77 1 view .LVU55
 268 0024 70BD     		pop	{r4, r5, r6, pc}
 269              	.LVL23:
 270              	.L10:
 271              	.LBB4:
  69:simpleserial-aes.c ****         aes_indep_enc(pt);
 272              		.loc 1 69 9 is_stmt 1 view .LVU56
 273 0026 FFF7FEFF 		bl	trigger_high
 274              	.LVL24:
  70:simpleserial-aes.c ****         trigger_low();
 275              		.loc 1 70 9 view .LVU57
 276 002a 2000     		movs	r0, r4
 277 002c FFF7FEFF 		bl	aes_indep_enc
 278              	.LVL25:
  71:simpleserial-aes.c ****     }
 279              		.loc 1 71 9 view .LVU58
  68:simpleserial-aes.c ****         trigger_high();
 280              		.loc 1 68 57 is_stmt 0 discriminator 3 view .LVU59
 281 0030 0135     		adds	r5, r5, #1
 282              	.LVL26:
  71:simpleserial-aes.c ****     }
 283              		.loc 1 71 9 view .LVU60
 284 0032 FFF7FEFF 		bl	trigger_low
 285              	.LVL27:
  68:simpleserial-aes.c ****         trigger_high();
 286              		.loc 1 68 57 is_stmt 1 discriminator 3 view .LVU61
  68:simpleserial-aes.c ****         trigger_high();
 287              		.loc 1 68 57 is_stmt 0 discriminator 3 view .LVU62
 288 0036 E8E7     		b	.L9
 289              	.L12:
 290              		.align	2
 291              	.L11:
 292 0038 00000000 		.word	.LANCHOR0
 293              	.LBE4:
 294              		.cfi_endproc
 295              	.LFE6:
 297              		.section	.text.led_ok,"ax",%progbits
 298              		.align	1
 299              		.weak	led_ok
 300              		.syntax unified
 301              		.code	16
 302              		.thumb_func
 304              	led_ok:
 305              	.LFB10:
 306              		.cfi_startproc
 307              		.file 2 ".././hal/hal.h"
   1:.././hal/hal.h **** /*
   2:.././hal/hal.h ****     This file is part of the ChipWhisperer Example Targets
   3:.././hal/hal.h ****     Copyright (C) 2012-2015 NewAE Technology Inc.
   4:.././hal/hal.h **** 
   5:.././hal/hal.h ****     This program is free software: you can redistribute it and/or modify
   6:.././hal/hal.h ****     it under the terms of the GNU General Public License as published by
   7:.././hal/hal.h ****     the Free Software Foundation, either version 3 of the License, or
   8:.././hal/hal.h ****     (at your option) any later version.
   9:.././hal/hal.h **** 
  10:.././hal/hal.h ****     This program is distributed in the hope that it will be useful,
  11:.././hal/hal.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:.././hal/hal.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:.././hal/hal.h ****     GNU General Public License for more details.
  14:.././hal/hal.h **** 
  15:.././hal/hal.h ****     You should have received a copy of the GNU General Public License
  16:.././hal/hal.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:.././hal/hal.h **** */
  18:.././hal/hal.h **** 
  19:.././hal/hal.h **** #ifndef HAL_H_
  20:.././hal/hal.h **** #define HAL_H_
  21:.././hal/hal.h **** 
  22:.././hal/hal.h **** #include <stdint.h>
  23:.././hal/hal.h **** 
  24:.././hal/hal.h **** void platform_init(void);
  25:.././hal/hal.h **** 
  26:.././hal/hal.h **** //PLATFORM Define Types
  27:.././hal/hal.h **** #define CW301_AVR      1
  28:.././hal/hal.h **** #define CW301_XMEGA    2
  29:.././hal/hal.h **** #define CW303          3
  30:.././hal/hal.h **** #define CW304          4
  31:.././hal/hal.h **** #define CW308_MEGARF   8
  32:.././hal/hal.h **** #define CW308_PIC24FJ  10
  33:.././hal/hal.h **** #define CW308_SAM4L    11
  34:.././hal/hal.h **** #define CW308_SI4010   12
  35:.././hal/hal.h **** #define CW308_MPC5748G 13
  36:.././hal/hal.h **** #define CW308_STM32F0  14
  37:.././hal/hal.h **** #define CW308_STM32F1  15
  38:.././hal/hal.h **** #define CW308_STM32F2  16
  39:.././hal/hal.h **** #define CW308_STM32F3  17
  40:.././hal/hal.h **** #define CW308_STM32F4  18
  41:.././hal/hal.h **** #define CW308_CC2538   19
  42:.././hal/hal.h **** #define CW308_K24F     20
  43:.././hal/hal.h **** #define CW308_NRF52840 21
  44:.././hal/hal.h **** #define CW308_AURIX    22
  45:.././hal/hal.h **** #define CW308_SAML11   23
  46:.././hal/hal.h **** #define CW308_EFM32TG11B 24
  47:.././hal/hal.h **** #define CW308_K82F     25
  48:.././hal/hal.h **** #define CW308_LPC55S6X 26
  49:.././hal/hal.h **** #define CW308_PSOC62   27
  50:.././hal/hal.h **** #define CW308_IMXRT1062 28
  51:.././hal/hal.h **** #define CW308_FE310    29
  52:.././hal/hal.h **** #define CW308_EFR32MG21A  30
  53:.././hal/hal.h **** #define CW308_EFM32GG11  31
  54:.././hal/hal.h **** #define CW308_STM32L5  32
  55:.././hal/hal.h **** #define CW308_STM32L4  33
  56:.././hal/hal.h **** #define CW308_RX65N  34
  57:.././hal/hal.h **** #define CW308_MPC5676R 35
  58:.././hal/hal.h **** #define CW308_NEORV32  36
  59:.././hal/hal.h **** #define CW305_IBEX  37
  60:.././hal/hal.h **** 
  61:.././hal/hal.h **** //HAL_TYPE Define Types
  62:.././hal/hal.h **** #define HAL_avr      1
  63:.././hal/hal.h **** #define HAL_xmega    2
  64:.././hal/hal.h **** #define HAL_pic24f   3
  65:.././hal/hal.h **** #define HAL_sam4l    4
  66:.././hal/hal.h **** #define HAL_stm32f0  5
  67:.././hal/hal.h **** #define HAL_stm32f1  6
  68:.././hal/hal.h **** #define HAL_stm32f2  7
  69:.././hal/hal.h **** #define HAL_stm32f3  8
  70:.././hal/hal.h **** #define HAL_stm32f4  9
  71:.././hal/hal.h **** #define HAL_cc2538   10
  72:.././hal/hal.h **** #define HAL_k24f     11
  73:.././hal/hal.h **** #define HAL_nrf52840 12
  74:.././hal/hal.h **** #define HAL_stm32f0_nano 13
  75:.././hal/hal.h **** #define HAL_aurix    14
  76:.././hal/hal.h **** #define HAL_saml11   15
  77:.././hal/hal.h **** #define HAL_efm32tg11b 16
  78:.././hal/hal.h **** #define HAL_k82f     17
  79:.././hal/hal.h **** #define HAL_lpc55s6x 18
  80:.././hal/hal.h **** #define HAL_psoc62   19
  81:.././hal/hal.h **** #define HAL_imxrt1062 20
  82:.././hal/hal.h **** #define HAL_fe310    21
  83:.././hal/hal.h **** #define HAL_efr32mg21a 22
  84:.././hal/hal.h **** #define HAL_efm32gg11 23
  85:.././hal/hal.h **** #define HAL_stm32l5 24
  86:.././hal/hal.h **** #define HAL_stm32l4 25
  87:.././hal/hal.h **** #define HAL_rx65n 26
  88:.././hal/hal.h **** #define HAL_mpc5676r 27
  89:.././hal/hal.h **** #define HAL_neorv32  28
  90:.././hal/hal.h **** #define HAL_sam4s  29
  91:.././hal/hal.h **** #define HAL_ibex  30
  92:.././hal/hal.h **** 
  93:.././hal/hal.h **** #if HAL_TYPE == HAL_avr
  94:.././hal/hal.h ****     #include <avr/io.h>
  95:.././hal/hal.h ****     #include <util/delay.h>
  96:.././hal/hal.h ****     #include "avr/avr_hal.h"
  97:.././hal/hal.h **** #elif HAL_TYPE == HAL_xmega
  98:.././hal/hal.h ****     #include <avr/io.h>
  99:.././hal/hal.h ****     #include <util/delay.h>
 100:.././hal/hal.h ****     #include "xmega/xmega_hal.h"
 101:.././hal/hal.h ****     #include "xmega/avr_compiler.h"
 102:.././hal/hal.h **** #elif HAL_TYPE == HAL_pic24f
 103:.././hal/hal.h ****     #include <xc.h>
 104:.././hal/hal.h ****     #include "pic24f/pic24f_hal.h"
 105:.././hal/hal.h ****     #include "pic24f/uart.h"
 106:.././hal/hal.h **** #elif HAL_TYPE == HAL_sam4l
 107:.././hal/hal.h ****     #include "sam4l/sam4l_hal.h"
 108:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f0
 109:.././hal/hal.h **** 	#include "stm32f0/stm32f0_hal.h"
 110:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f1
 111:.././hal/hal.h **** 	#include "stm32f1/stm32f1_hal.h"
 112:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f2
 113:.././hal/hal.h **** 	#include "stm32f2/stm32f2_hal.h"
 114:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f3
 115:.././hal/hal.h **** 	#include "stm32f3/stm32f3_hal.h"
 116:.././hal/hal.h **** 	#ifdef SECCAN
 117:.././hal/hal.h **** 		#include "stm32f3/stm32f3_hal_seccan.h"
 118:.././hal/hal.h **** 	#endif
 119:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f4
 120:.././hal/hal.h **** 	#include "stm32f4/stm32f4_hal.h"
 121:.././hal/hal.h **** #elif HAL_TYPE == HAL_cc2538
 122:.././hal/hal.h **** 	#include "cc2538/cc2538_hal.h"
 123:.././hal/hal.h **** #elif HAL_TYPE == HAL_k24f
 124:.././hal/hal.h ****     #include "k24f/k24f_hal.h"
 125:.././hal/hal.h **** #elif HAL_TYPE == HAL_k82f
 126:.././hal/hal.h **** #include "k82f/k82f_hal.h"
 127:.././hal/hal.h **** #elif HAL_TYPE == HAL_nrf52840
 128:.././hal/hal.h ****     #include "nrf52840/nrf52840_hal.h"   
 129:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f0_nano
 130:.././hal/hal.h ****     #include "stm32f0/stm32f0_hal.h" 
 131:.././hal/hal.h ****     void led_error(unsigned int status);
 132:.././hal/hal.h ****     void led_ok(unsigned int status);
 133:.././hal/hal.h **** #elif HAL_TYPE == HAL_aurix
 134:.././hal/hal.h ****     #include "aurix/aurix_hal.h"
 135:.././hal/hal.h **** #elif HAL_TYPE == HAL_saml11
 136:.././hal/hal.h ****      #include "saml11/saml11_hal.h"
 137:.././hal/hal.h **** #elif HAL_TYPE == HAL_efm32tg11b
 138:.././hal/hal.h ****      #include "efm32tg11b/efm32tg11b_hal.h"
 139:.././hal/hal.h **** #elif HAL_TYPE == HAL_lpc55s6x
 140:.././hal/hal.h ****      #include "lpc55s6x/lpc55s6x_hal.h"
 141:.././hal/hal.h **** #elif HAL_TYPE == HAL_psoc62
 142:.././hal/hal.h ****     #include "psoc62/psoc62_hal.h"
 143:.././hal/hal.h **** #elif HAL_TYPE == HAL_imxrt1062
 144:.././hal/hal.h ****     #include "imxrt1062/imxrt1062_hal.h"
 145:.././hal/hal.h **** #elif HAL_TYPE == HAL_fe310
 146:.././hal/hal.h ****     #include "fe310/fe310_hal.h"
 147:.././hal/hal.h **** #elif HAL_TYPE == HAL_efr32mg21a
 148:.././hal/hal.h ****     #include "efr32mg21a/efr32mg21a_hal.h"
 149:.././hal/hal.h **** #elif HAL_TYPE == HAL_efm32gg11
 150:.././hal/hal.h ****     #include "efm32gg11/efm32gg11_hal.h"
 151:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32l5
 152:.././hal/hal.h ****     #include "stm32l5/stm32l5_hal.h"
 153:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32l4
 154:.././hal/hal.h ****     #include "stm32l4/stm32l4_hal.h"
 155:.././hal/hal.h **** #elif HAL_TYPE == HAL_rx65n
 156:.././hal/hal.h ****     #include "rx65n/rx65n_hal.h"
 157:.././hal/hal.h **** #elif HAL_TYPE == HAL_mpc5676r
 158:.././hal/hal.h ****     #include "mpc5676r/MPC5676R_hal.h"
 159:.././hal/hal.h **** #elif HAL_TYPE == HAL_neorv32
 160:.././hal/hal.h ****     #include "neorv32/neorv32_hal.h"
 161:.././hal/hal.h **** #elif HAL_TYPE == HAL_sam4s
 162:.././hal/hal.h ****     #include "sam4s/sam4s_hal.h"
 163:.././hal/hal.h **** #elif HAL_TYPE == HAL_ibex
 164:.././hal/hal.h ****     #include "ibex/ibex_hal.h"
 165:.././hal/hal.h **** #else
 166:.././hal/hal.h ****     #error "Unsupported HAL Type"
 167:.././hal/hal.h **** #endif
 168:.././hal/hal.h **** 
 169:.././hal/hal.h **** #if PLATFORM == CW308_MEGARF
 170:.././hal/hal.h ****     #undef trigger_setup
 171:.././hal/hal.h ****     #undef trigger_high
 172:.././hal/hal.h ****     #undef trigger_low
 173:.././hal/hal.h ****     #define trigger_setup() DDRD |= 0x02
 174:.././hal/hal.h ****     #define trigger_high()  PORTD |= 0x02
 175:.././hal/hal.h ****     #define trigger_low()   PORTD &= ~(0x02)
 176:.././hal/hal.h ****     
 177:.././hal/hal.h ****     #define HW_AES128_Init();      AES_CTRL = 0x00;
 178:.././hal/hal.h **** 
 179:.././hal/hal.h ****     #define HW_AES128_LoadKey(key);  for (uint8_t i = 0; i < 16; i++){ \
 180:.././hal/hal.h ****                                      AES_KEY = *(key+i); \
 181:.././hal/hal.h ****                                   }
 182:.././hal/hal.h **** 
 183:.././hal/hal.h ****     #define HW_AES128_Enc(pt);  for (uint8_t i = 0; i < 16; i++){ \
 184:.././hal/hal.h ****                                     AES_STATE = *(pt+i); \
 185:.././hal/hal.h ****                                 } \
 186:.././hal/hal.h ****                                   \
 187:.././hal/hal.h ****                                 AES_CTRL |= 1<<AES_REQUEST; \
 188:.././hal/hal.h ****                                   \
 189:.././hal/hal.h ****                                 /*Wait for done  */ \
 190:.././hal/hal.h ****                                 while ((AES_STATUS & (1<<AES_DONE)) == 0){ \
 191:.././hal/hal.h ****                                     ; \
 192:.././hal/hal.h ****                                 } \
 193:.././hal/hal.h ****                                   \
 194:.././hal/hal.h ****                                 for (uint8_t i = 0; i < 16; i++){ \
 195:.././hal/hal.h ****                                     *(pt+i) = AES_STATE; \
 196:.././hal/hal.h ****                                 }
 197:.././hal/hal.h ****     
 198:.././hal/hal.h **** #endif
 199:.././hal/hal.h **** 
 200:.././hal/hal.h **** __attribute__((weak)) void led_ok(unsigned int status)
 308              		.loc 2 200 28 is_stmt 1 view -0
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312              		@ sp needed
 313 0000 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE10:
 317              		.section	.text.led_error,"ax",%progbits
 318              		.align	1
 319              		.weak	led_error
 320              		.syntax unified
 321              		.code	16
 322              		.thumb_func
 324              	led_error:
 325              	.LVL28:
 326              	.LFB1:
 201:.././hal/hal.h **** {
 202:.././hal/hal.h **** }
 203:.././hal/hal.h **** 
 204:.././hal/hal.h **** __attribute__((weak)) void led_error(unsigned int status)
 205:.././hal/hal.h **** {
 327              		.loc 2 205 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 206:.././hal/hal.h **** }
 332              		.loc 2 206 1 view .LVU65
 333              		@ sp needed
 334 0000 7047     		bx	lr
 335              		.cfi_endproc
 336              	.LFE1:
 338              		.section	.rodata.str1.1,"aMS",%progbits,1
 339              	.LC2:
 340 0000 2B7E1516 		.ascii	"+~\025\026(\256\322\246\253\367\025\210\011\317O<\000"
 340      28AED2A6 
 340      ABF71588 
 340      09CF4F3C 
 340      00
 341              		.section	.text.startup.main,"ax",%progbits
 342              		.align	1
 343              		.global	main
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 348              	main:
 349              	.LFB8:
  87:simpleserial-aes.c **** 
  88:simpleserial-aes.c **** #if SS_VER == SS_VER_2_1
  89:simpleserial-aes.c **** uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
  90:simpleserial-aes.c **** {
  91:simpleserial-aes.c ****     uint8_t req_len = 0;
  92:simpleserial-aes.c ****     uint8_t err = 0;
  93:simpleserial-aes.c ****     uint8_t mask_len = 0;
  94:simpleserial-aes.c ****     if (scmd & 0x04) {
  95:simpleserial-aes.c ****         // Mask has variable length. First byte encodes the length
  96:simpleserial-aes.c ****         mask_len = buf[req_len];
  97:simpleserial-aes.c ****         req_len += 1 + mask_len;
  98:simpleserial-aes.c ****         if (req_len > len) {
  99:simpleserial-aes.c ****             return SS_ERR_LEN;
 100:simpleserial-aes.c ****         }
 101:simpleserial-aes.c ****         err = get_mask(buf + req_len - mask_len, mask_len);
 102:simpleserial-aes.c ****         if (err)
 103:simpleserial-aes.c ****             return err;
 104:simpleserial-aes.c ****     }
 105:simpleserial-aes.c **** 
 106:simpleserial-aes.c ****     if (scmd & 0x02) {
 107:simpleserial-aes.c ****         req_len += 16;
 108:simpleserial-aes.c ****         if (req_len > len) {
 109:simpleserial-aes.c ****             return SS_ERR_LEN;
 110:simpleserial-aes.c ****         }
 111:simpleserial-aes.c ****         err = get_key(buf + req_len - 16, 16);
 112:simpleserial-aes.c ****         if (err)
 113:simpleserial-aes.c ****             return err;
 114:simpleserial-aes.c ****     }
 115:simpleserial-aes.c ****     if (scmd & 0x01) {
 116:simpleserial-aes.c ****         req_len += 16;
 117:simpleserial-aes.c ****         if (req_len > len) {
 118:simpleserial-aes.c ****             return SS_ERR_LEN;
 119:simpleserial-aes.c ****         }
 120:simpleserial-aes.c ****         err = get_pt(buf + req_len - 16, 16);
 121:simpleserial-aes.c ****         if (err)
 122:simpleserial-aes.c ****             return err;
 123:simpleserial-aes.c ****     }
 124:simpleserial-aes.c **** 
 125:simpleserial-aes.c ****     if (len != req_len) {
 126:simpleserial-aes.c ****         return SS_ERR_LEN;
 127:simpleserial-aes.c ****     }
 128:simpleserial-aes.c **** 
 129:simpleserial-aes.c ****     return 0x00;
 130:simpleserial-aes.c **** 
 131:simpleserial-aes.c **** }
 132:simpleserial-aes.c **** #endif
 133:simpleserial-aes.c **** 
 134:simpleserial-aes.c **** int main(void)
 135:simpleserial-aes.c **** {
 350              		.loc 1 135 1 view -0
 351              		.cfi_startproc
 352              		@ Volatile: function does not return.
 353              		@ args = 0, pretend = 0, frame = 16
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 136:simpleserial-aes.c **** 	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 355              		.loc 1 136 2 view .LVU67
 135:simpleserial-aes.c **** 	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 356              		.loc 1 135 1 is_stmt 0 view .LVU68
 357 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 358              	.LCFI4:
 359              		.cfi_def_cfa_offset 24
 360              		.cfi_offset 0, -24
 361              		.cfi_offset 1, -20
 362              		.cfi_offset 2, -16
 363              		.cfi_offset 3, -12
 364              		.cfi_offset 4, -8
 365              		.cfi_offset 14, -4
 366              		.loc 1 136 10 view .LVU69
 367 0002 1022     		movs	r2, #16
 368 0004 1949     		ldr	r1, .L17
 369 0006 6846     		mov	r0, sp
 370 0008 FFF7FEFF 		bl	memcpy
 371              	.LVL29:
 137:simpleserial-aes.c **** 
 138:simpleserial-aes.c ****     platform_init();
 372              		.loc 1 138 5 is_stmt 1 view .LVU70
 373 000c FFF7FEFF 		bl	platform_init
 374              	.LVL30:
 139:simpleserial-aes.c ****     init_uart();
 375              		.loc 1 139 5 view .LVU71
 376 0010 FFF7FEFF 		bl	init_uart
 377              	.LVL31:
 140:simpleserial-aes.c ****     trigger_setup();
 378              		.loc 1 140 5 view .LVU72
 379 0014 FFF7FEFF 		bl	trigger_setup
 380              	.LVL32:
 141:simpleserial-aes.c **** 
 142:simpleserial-aes.c **** 	aes_indep_init();
 381              		.loc 1 142 2 view .LVU73
 382 0018 FFF7FEFF 		bl	aes_indep_init
 383              	.LVL33:
 143:simpleserial-aes.c **** 	aes_indep_key(tmp);
 384              		.loc 1 143 2 view .LVU74
 385 001c 6846     		mov	r0, sp
 386 001e FFF7FEFF 		bl	aes_indep_key
 387              	.LVL34:
 144:simpleserial-aes.c **** 
 145:simpleserial-aes.c ****     /* Uncomment this to get a HELLO message for debug */
 146:simpleserial-aes.c **** 
 147:simpleserial-aes.c ****     // putch('h');
 148:simpleserial-aes.c ****     // putch('e');
 149:simpleserial-aes.c ****     // putch('l');
 150:simpleserial-aes.c ****     // putch('l');
 151:simpleserial-aes.c ****     // putch('o');
 152:simpleserial-aes.c ****     // putch('\n');
 153:simpleserial-aes.c **** 
 154:simpleserial-aes.c **** 	simpleserial_init();
 388              		.loc 1 154 2 view .LVU75
 389 0022 FFF7FEFF 		bl	simpleserial_init
 390              	.LVL35:
 155:simpleserial-aes.c ****     #if SS_VER == SS_VER_2_1
 156:simpleserial-aes.c ****     simpleserial_addcmd(0x01, 16, aes);
 157:simpleserial-aes.c ****     #else
 158:simpleserial-aes.c ****     simpleserial_addcmd('k', 16, get_key);
 391              		.loc 1 158 5 view .LVU76
 392 0026 1021     		movs	r1, #16
 393 0028 114A     		ldr	r2, .L17+4
 394 002a 6B20     		movs	r0, #107
 395 002c FFF7FEFF 		bl	simpleserial_addcmd
 396              	.LVL36:
 159:simpleserial-aes.c ****     simpleserial_addcmd('p', 16,  get_pt);
 397              		.loc 1 159 5 view .LVU77
 398 0030 1021     		movs	r1, #16
 399 0032 104A     		ldr	r2, .L17+8
 400 0034 7020     		movs	r0, #112
 401 0036 FFF7FEFF 		bl	simpleserial_addcmd
 402              	.LVL37:
 160:simpleserial-aes.c ****     simpleserial_addcmd('x',  0,   reset);
 403              		.loc 1 160 5 view .LVU78
 404 003a 0021     		movs	r1, #0
 405 003c 0E4A     		ldr	r2, .L17+12
 406 003e 7820     		movs	r0, #120
 407 0040 FFF7FEFF 		bl	simpleserial_addcmd
 408              	.LVL38:
 161:simpleserial-aes.c ****     simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 409              		.loc 1 161 5 view .LVU79
 410 0044 0123     		movs	r3, #1
 411 0046 1221     		movs	r1, #18
 412 0048 0C4A     		ldr	r2, .L17+16
 413 004a 6D20     		movs	r0, #109
 414 004c FFF7FEFF 		bl	simpleserial_addcmd_flags
 415              	.LVL39:
 162:simpleserial-aes.c ****     simpleserial_addcmd('s', 2, enc_multi_setnum);
 416              		.loc 1 162 5 view .LVU80
 417 0050 0221     		movs	r1, #2
 418 0052 0B4A     		ldr	r2, .L17+20
 419 0054 7320     		movs	r0, #115
 420 0056 FFF7FEFF 		bl	simpleserial_addcmd
 421              	.LVL40:
 163:simpleserial-aes.c ****     simpleserial_addcmd('f', 16, enc_multi_getpt);
 422              		.loc 1 163 5 view .LVU81
 423 005a 1021     		movs	r1, #16
 424 005c 6620     		movs	r0, #102
 425 005e 094A     		ldr	r2, .L17+24
 426 0060 FFF7FEFF 		bl	simpleserial_addcmd
 427              	.LVL41:
 428              	.L16:
 164:simpleserial-aes.c ****     #endif
 165:simpleserial-aes.c ****     while(1)
 429              		.loc 1 165 5 view .LVU82
 166:simpleserial-aes.c ****         simpleserial_get();
 430              		.loc 1 166 9 discriminator 1 view .LVU83
 431 0064 FFF7FEFF 		bl	simpleserial_get
 432              	.LVL42:
 165:simpleserial-aes.c ****         simpleserial_get();
 433              		.loc 1 165 10 view .LVU84
 434 0068 FCE7     		b	.L16
 435              	.L18:
 436 006a C046     		.align	2
 437              	.L17:
 438 006c 00000000 		.word	.LC2
 439 0070 00000000 		.word	get_key
 440 0074 00000000 		.word	get_pt
 441 0078 00000000 		.word	reset
 442 007c 00000000 		.word	get_mask
 443 0080 00000000 		.word	enc_multi_setnum
 444 0084 00000000 		.word	enc_multi_getpt
 445              		.cfi_endproc
 446              	.LFE8:
 448              		.data
 449              		.align	1
 450              		.set	.LANCHOR0,. + 0
 453              	num_encryption_rounds:
 454 0000 0A00     		.short	10
 455              		.text
 456              	.Letext0:
 457              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 458              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 459              		.file 5 ".././simpleserial/simpleserial.h"
 460              		.file 6 ".././crypto/aes-independant.h"
 461              		.file 7 ".././hal/stm32f0/stm32f0_hal.h"
 462              		.file 8 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 simpleserial-aes.c
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:19     .text.reset:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:25     .text.reset:00000000 reset
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:44     .text.enc_multi_setnum:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:50     .text.enc_multi_setnum:00000000 enc_multi_setnum
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:82     .text.enc_multi_setnum:00000014 $d
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:87     .text.get_mask:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:93     .text.get_mask:00000000 get_mask
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:119    .text.get_key:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:125    .text.get_key:00000000 get_key
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:151    .text.get_pt:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:157    .text.get_pt:00000000 get_pt
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:208    .text.enc_multi_getpt:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:214    .text.enc_multi_getpt:00000000 enc_multi_getpt
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:292    .text.enc_multi_getpt:00000038 $d
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:298    .text.led_ok:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:304    .text.led_ok:00000000 led_ok
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:318    .text.led_error:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:324    .text.led_error:00000000 led_error
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:342    .text.startup.main:00000000 $t
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:348    .text.startup.main:00000000 main
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:438    .text.startup.main:0000006c $d
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:449    .data:00000000 $d
/var/folders/9f/5d0dy5x17vxf84ddjfcw5h2r0000gp/T//ccIg0662.s:453    .data:00000000 num_encryption_rounds

UNDEFINED SYMBOLS
aes_indep_mask
aes_indep_key
aes_indep_enc_pretrigger
trigger_high
aes_indep_enc
trigger_low
aes_indep_enc_posttrigger
simpleserial_put
memcpy
platform_init
init_uart
trigger_setup
aes_indep_init
simpleserial_init
simpleserial_addcmd
simpleserial_addcmd_flags
simpleserial_get
